/*
 * Copyright (c) 2023 Antti Tiihala
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * include/__dancy/keys.h
 *      The Arctic Dancy Header
 */

#ifndef __DANCY_INTERNAL_KEYS_H
#define __DANCY_INTERNAL_KEYS_H

#include <__dancy/core.h>

__Dancy_Header_Begin

enum __dancy_key {
	__DANCY_KEY_NULL,
	__DANCY_KEY_ERROR1,
	__DANCY_KEY_ERROR2,
	__DANCY_KEY_UNDEFINED,
	__DANCY_KEY_A,
	__DANCY_KEY_B,
	__DANCY_KEY_C,
	__DANCY_KEY_D,
	__DANCY_KEY_E,
	__DANCY_KEY_F,
	__DANCY_KEY_G,
	__DANCY_KEY_H,
	__DANCY_KEY_I,
	__DANCY_KEY_J,
	__DANCY_KEY_K,
	__DANCY_KEY_L,
	__DANCY_KEY_M,
	__DANCY_KEY_N,
	__DANCY_KEY_O,
	__DANCY_KEY_P,
	__DANCY_KEY_Q,
	__DANCY_KEY_R,
	__DANCY_KEY_S,
	__DANCY_KEY_T,
	__DANCY_KEY_U,
	__DANCY_KEY_V,
	__DANCY_KEY_W,
	__DANCY_KEY_X,
	__DANCY_KEY_Y,
	__DANCY_KEY_Z,
	__DANCY_KEY_1,
	__DANCY_KEY_2,
	__DANCY_KEY_3,
	__DANCY_KEY_4,
	__DANCY_KEY_5,
	__DANCY_KEY_6,
	__DANCY_KEY_7,
	__DANCY_KEY_8,
	__DANCY_KEY_9,
	__DANCY_KEY_0,
	__DANCY_KEY_ENTER,
	__DANCY_KEY_ESCAPE,
	__DANCY_KEY_BACKSPACE,
	__DANCY_KEY_TAB,
	__DANCY_KEY_SPACE,
	__DANCY_KEY_UNDERSCORE,
	__DANCY_KEY_EQUALS,
	__DANCY_KEY_LEFTBRACKET,
	__DANCY_KEY_RIGHTBRACKET,
	__DANCY_KEY_BACKSLASH,
	__DANCY_KEY_HASH,
	__DANCY_KEY_SEMICOLON,
	__DANCY_KEY_APOSTROPHE,
	__DANCY_KEY_GRAVE,
	__DANCY_KEY_COMMA,
	__DANCY_KEY_PERIOD,
	__DANCY_KEY_SLASH,
	__DANCY_KEY_CAPSLOCK,
	__DANCY_KEY_F1,
	__DANCY_KEY_F2,
	__DANCY_KEY_F3,
	__DANCY_KEY_F4,
	__DANCY_KEY_F5,
	__DANCY_KEY_F6,
	__DANCY_KEY_F7,
	__DANCY_KEY_F8,
	__DANCY_KEY_F9,
	__DANCY_KEY_F10,
	__DANCY_KEY_F11,
	__DANCY_KEY_F12,
	__DANCY_KEY_PRINTSCREEN,
	__DANCY_KEY_SCROLLLOCK,
	__DANCY_KEY_PAUSE,
	__DANCY_KEY_INSERT,
	__DANCY_KEY_HOME,
	__DANCY_KEY_PAGEUP,
	__DANCY_KEY_DELETE,
	__DANCY_KEY_END,
	__DANCY_KEY_PAGEDOWN,
	__DANCY_KEY_RIGHTARROW,
	__DANCY_KEY_LEFTARROW,
	__DANCY_KEY_DOWNARROW,
	__DANCY_KEY_UPARROW,
	__DANCY_KEY_NUMLOCK,
	__DANCY_KEY_PADSLASH,
	__DANCY_KEY_PADASTERISK,
	__DANCY_KEY_PADMINUS,
	__DANCY_KEY_PADPLUS,
	__DANCY_KEY_PADENTER,
	__DANCY_KEY_PAD1,
	__DANCY_KEY_PAD2,
	__DANCY_KEY_PAD3,
	__DANCY_KEY_PAD4,
	__DANCY_KEY_PAD5,
	__DANCY_KEY_PAD6,
	__DANCY_KEY_PAD7,
	__DANCY_KEY_PAD8,
	__DANCY_KEY_PAD9,
	__DANCY_KEY_PAD0,
	__DANCY_KEY_PADDELETE,
	__DANCY_KEY_NONUS,

	__DANCY_KEY_223 = 223,

	__DANCY_KEY_LCTRL,
	__DANCY_KEY_LSHIFT,
	__DANCY_KEY_LALT,
	__DANCY_KEY_LGUI,
	__DANCY_KEY_RCTRL,
	__DANCY_KEY_RSHIFT,
	__DANCY_KEY_RALT,
	__DANCY_KEY_RGUI,

	__DANCY_KEY_255 = 255
};

#define __DANCY_KEYTYP_REPEAT       (0x00004000)
#define __DANCY_KEYTYP_RELEASE      (0x00008000)

#define __DANCY_KEYMOD_LCTRL        (0x00010000)
#define __DANCY_KEYMOD_LSHIFT       (0x00020000)
#define __DANCY_KEYMOD_LALT         (0x00040000)
#define __DANCY_KEYMOD_LGUI         (0x00080000)
#define __DANCY_KEYMOD_RCTRL        (0x00100000)
#define __DANCY_KEYMOD_RSHIFT       (0x00200000)
#define __DANCY_KEYMOD_RALT         (0x00400000)
#define __DANCY_KEYMOD_RGUI         (0x00800000)

#define __DANCY_KEYMOD_NUMLOCK      (0x01000000)
#define __DANCY_KEYMOD_CAPSLOCK     (0x02000000)
#define __DANCY_KEYMOD_SCROLLLOCK   (0x04000000)

#define __DANCY_KEYMAP_NORMAL       (0x00000000)
#define __DANCY_KEYMAP_SHIFT        (0x00000001)
#define __DANCY_KEYMAP_CTRL         (0x00000002)
#define __DANCY_KEYMAP_ALTGR        (0x00000004)
#define __DANCY_KEYMAP_ALT          (0x00000008)

#define __DANCY_KEYBIT_CAPS         (0x00200000)
#define __DANCY_KEYBIT_NPAD         (0x00400000)
#define __DANCY_KEYBIT_DEAD         (0x00800000)

struct __dancy_keymap {
	int map[16][128];
	int diacritic[64][3];

	const char *name;
	const char *description;
};

extern const struct __dancy_keymap *const __dancy_keymaps[];

void __dancy_keymap_write(int fd, int key,
	const struct __dancy_keymap *map, int *state);

__Dancy_Header_End

#endif
